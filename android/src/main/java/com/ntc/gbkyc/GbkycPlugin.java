package com.ntc.gbkyc;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.embedding.engine.plugins.activity.ActivityAware;
import io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.MethodChannel.MethodCallHandler;
import io.flutter.plugin.common.MethodChannel.Result;

import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import Processors.Config;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.Processor;

import io.flutter.plugin.common.PluginRegistry;
import okhttp3.Call;
import okhttp3.Callback;

/** GbkycPlugin */
public class GbkycPlugin
        implements FlutterPlugin, MethodCallHandler, ActivityAware, PluginRegistry.ActivityResultListener {
    public static FaceTecSessionResult latestSessionResult;
    private MethodChannel channel;
    public Processor latestProcessor;
    public Context context;
    public Activity activity;

    @Override
    public void onAttachedToEngine(@NonNull FlutterPluginBinding flutterPluginBinding) {

        channel = new MethodChannel(flutterPluginBinding.getBinaryMessenger(), "gbkyc");
        channel.setMethodCallHandler(this);
        context = flutterPluginBinding.getApplicationContext();

        Config.initializeFaceTecSDKFromAutogeneratedConfig(context, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if (successful) {
                    Log.e("FaceTecSDK", "Initialization Successful.");
                } else {
                    Log.e("FaceTecSDK", "Initialization Unsuccessful.");
                }
            }
        });

        FaceTecSDK.setCustomization(Config.currentCustomization);
        Config.currentCustomization.getOverlayCustomization().showBrandingImage = false;
    }

    @Override
    public void onMethodCall(@NonNull MethodCall call, @NonNull Result result) {
        switch (call.method) {
            case "getLivenessFacetec":
                latestProcessor = new SetSuccessFalse();
                onLivenessCheckPressed();
                Log.e("FaceTecSDK", "getLivenessFacetec : " + Boolean.toString(latestProcessor.isSuccess()));
                break;
            case "getImageFacetec":
                Log.e("FaceTecSDK", "getImageFacetec : " + latestSessionResult.getAuditTrailCompressedBase64()[0]);
                result.success(latestSessionResult.getAuditTrailCompressedBase64()[0]);
                break;
            case "getResultFacetec":
                Log.e("FaceTecSDK", "getResultFacetec : " + Boolean.toString(latestProcessor.isSuccess()));
                result.success(latestProcessor.isSuccess());
                break;
            default:
                result.notImplemented();
        }
    }

    @Override
    public void onDetachedFromEngine(@NonNull FlutterPluginBinding binding) {
        channel.setMethodCallHandler(null);
    }

    @Override
    public void onAttachedToActivity(ActivityPluginBinding binding) {
        activity = binding.getActivity();
        binding.addActivityResultListener(this);
    }

    @Override
    public void onDetachedFromActivityForConfigChanges() {
    }

    @Override
    public void onReattachedToActivityForConfigChanges(ActivityPluginBinding binding) {
    }

    @Override
    public void onDetachedFromActivity() {
    }

    // Perform Liveness Check.
    public void onLivenessCheckPressed() {
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                latestProcessor = new LivenessCheckProcessor(sessionToken, activity);
            }
        });
    }

    @Override
    public boolean onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        return false;
    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.e("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to
                // NETWORK_ERROR.
                if (!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                Log.e("FaceTecSDK", "session-token URL : " + Config.BaseURL + "/session-token");
                Log.e("FaceTecSDK", "session-token ,response : " + responseString);
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if (responseJSON.has("sessionToken")) {
                        Log.e("FaceTecSDKSampleApp ", "Session Token : " + responseJSON.getString("sessionToken"));
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    } else {
                        Log.e("FaceTecSDKSampleApp ", "Response : " + responseJSON);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                    Log.e("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");

                }
            }
        });
    }

    public class SetSuccessFalse extends Processor {
        private boolean isSuccess = false;

        public boolean isSuccess() {
            return this.isSuccess;
        }
    }
}
