import Flutter
import UIKit
import FaceTecSDK

public class SwiftGbkycPlugin: NSObject, FlutterPlugin {
    
    var controller: FlutterViewController!
    let facetec = SampleAppViewController()
    
    public static func register(with registrar: FlutterPluginRegistrar) {
        let channel = FlutterMethodChannel(name: "gbkyc", binaryMessenger: registrar.messenger())
        let instance = SwiftGbkycPlugin()
        registrar.addMethodCallDelegate(instance, channel: channel)
        
        let url = URL(string: "https://api.gbwallet.co/register-api/users/liveness_config")!
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.allHTTPHeaderFields = [
            "Content-Type": "application/json",
            "Authorization2": "rOewM45nfCS7nYpv"
        ]

        NSURLConnection.sendAsynchronousRequest(request, queue: OperationQueue.main) {(response, data, error) in
            guard let data = data else { return }
            let json = try? JSONSerialization.jsonObject(with: data, options: [])
            
            if let res = json as? [String: Any] {
                if let data = res["response"] as? [String: Any] {
                    if let key = data["data"] as? [String: Any] {
                        for (key, value) in key {
                            if(key == "key"){
                                Config.productionKey = value as! String
                                
                                // Initialize FaceTec SDK
                                Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
                                    if(initializationSuccessful) {
                                        print("FaceTecSDK Initialization Successful.")
                                    }else {
                                        print("FaceTecSDK Initialization Unsuccessful.")
                                    }
                                })
                            }
                        }
                    }
                }
            }
        }
                        
        FaceTec.sdk.setCustomization(Config.currentCustomization)
        Config.currentCustomization.overlayCustomization.showBrandingImage = false
    }
    
    public func handle(_ call: FlutterMethodCall, result: @escaping FlutterResult) {

        if (call.method == "getLivenessFacetec") {
            guard let args = call.arguments else {
                return
            }
            if let myArgs = args as? [String: Any],
                let local = myArgs["local"] as? String {
                FaceTec.sdk.setLanguage(local)
            }

            controller = UIApplication.shared.delegate!.window??.rootViewController! as? FlutterViewController

            if(controller == nil) {
                controller = UIApplication.shared.keyWindow!.rootViewController!.presentedViewController as? FlutterViewController
            }
            
            controller.addChild(facetec)
            facetec.onLivenessCheckPressed(self)
            
            result("Call Liveness")
        } else if (call.method == "getResultFacetec") {
            result(facetec.latestProcessor.isSuccess())
        } else if (call.method == "getImageFacetec") {
            result(facetec.latestSessionResult.auditTrailCompressedBase64![0])
        }
    }
    
}
